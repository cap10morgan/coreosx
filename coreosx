#!/bin/bash
#
# coreosx
# =======
#
# Easy installation of CoreOS (docker, etcd, fleet) on OS X
# https://github.com/cap10morgan/coreosx
#
# Copyright 2014 Wes Morgan
#
# Adapted from docker-osx (https://github.com/noplay/docker-osx), which is
# Copyright 2013 Julien Duponchelle
##
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

set -e

export VAGRANT_CWD="$HOME/.coreosx"

COREOS_IP="172.16.23.75"
COREOS_DOMAIN="localcoreos"
DOCKER_PORT="2375"

COREOS_CHANNEL="alpha"

DOCKER_BIN="/usr/local/bin/docker"

COREOS_DEFAULTS_FILE="$VAGRANT_CWD/defaults"

if [ -f "$COREOS_DEFAULTS_FILE" ]
then
    . "$COREOS_DEFAULTS_FILE"
fi

# TODO: Install the same version of Docker client in OS X as CoreOS is using in the VM

if [ -z "$VAGRANT_BOX_URL" ]
then
    VAGRANT_BOX_URL="http://${COREOS_CHANNEL}.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json"
fi
export DOCKER_HOST="tcp://$COREOS_IP:$DOCKER_PORT"

##########

function check_deps() {
  if ! hash vagrant 2>/dev/null; then
    echo "You need VirtualBox and Vagrant to use coreosx."
    echo
    echo "You can download VirtualBox from:"
    echo "https://www.virtualbox.org/wiki/Downloads"
    echo
    echo "You can download Vagrant from:"
    echo "http://www.vagrantup.com/downloads.html"
    exit 1
  fi
}

function create_vagrant_dir() {
  if [ ! -d "$VAGRANT_CWD" ]; then
    mkdir "$VAGRANT_CWD"
  fi
}

function write_vagrantfile() {
  cat > "$VAGRANT_CWD/Vagrantfile" <<EOF
# automatically generated by coreosx
# do not edit this file - find the template in coreosx script instead!
Vagrant.configure("2") do |config|
  config.vm.box = "coreos-${COREOS_CHANNEL}"
  config.vm.box_url = "$VAGRANT_BOX_URL"

  config.ssh.forward_agent = true
  config.vm.network "private_network", :ip => "$COREOS_IP"
  %w(4001 7001).each do |p|
    config.vm.network "forwarded_port", guest: p.to_i, host: p.to_i
  end

  config.vm.hostname = "$COREOS_DOMAIN"

  config.vm.synced_folder "$(echo ~)", "$(echo ~)", create: true, id: 'core', nfs: true, mount_options: ['nolock,vers=3,udp']

  config.vm.provider :virtualbox do |vb|
    vb.check_guest_additions = false
    vb.functional_vboxsf     = false
    vb.customize ['modifyvm', :id, '--memory', ENV['VM_MEMORY'] || 1024]
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
  end

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  vagrantfile_extra = "#{ENV['VAGRANT_CWD']}/Vagrantfile_extra.rb"
  eval File.open(vagrantfile_extra).read if File.exists?(vagrantfile_extra)

  config.vm.provision :file, source: "#{ENV['VAGRANT_CWD']}/user-data",
                             destination: "/tmp/vagrantfile-user-data"
  config.vm.provision :shell, inline: "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", privileged: true
end
EOF
}

function write_user-data() {
  cat > "$VAGRANT_CWD/user-data" <<EOF
#cloud-config

coreos:
  etcd:
      addr: \$public_ipv4:4001
      peer-addr: \$public_ipv4:7001
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
      runtime: no
      content: |
        [Unit]
        Description=fleet

        [Service]
        Environment=FLEET_PUBLIC_IP=\$public_ipv4
        ExecStart=/usr/bin/fleet
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=$DOCKER_PORT
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target
EOF
}

function setup_etc_host {
  if [ -f "$VAGRANT_CWD/.localcoreos-host" ] && [ `cat "$VAGRANT_CWD/.localcoreos-host"` = "0" ]
  then
    return
  fi
  if ! grep -q localcoreos /etc/hosts
  then
    echo "Adding localcoreos to /etc/hosts (may need your password for sudo)..."

    echo "If you want you can add it manually by adding:"
    echo "$COREOS_IP localcoreos add the end of the /etc/hosts"
    echo ""
    echo "Or you can just ignore it and directly use the ip: $COREOS_IP"

    read -p "Add the localcoreos host to system configuration? [y/n] " -n 1 -r
    echo    # move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      sudo sh -c "echo '$COREOS_IP $COREOS_DOMAIN' >> /etc/hosts"
      echo -n 1 > "$VAGRANT_CWD/.localcoreos-host" # We need to check the /etc/hosts at each launch
    else
      echo -n 0 > "$VAGRANT_CWD/.localcoreos-host" # We never check the /etc/hosts at launch
    fi
  fi
}

function help() {
  echo "coreosx commands:"
  echo "  start     Start local CoreOS virtual machine"
  echo "  halt      Halt local CoreOS virtual machine"
  echo "  suspend   Suspend local CoreOS virtual machine"
  echo "  status    Outputs status of the local CoreOS virtual machine"
  echo "  destroy   Destroy local CoreOS virtual machine"
  echo "  vagrant   Issue subcommands directly to the vagrant CLI"
  echo "  ssh       Open SSH console on vagrant box"
  echo "  env       Outputs environment variables for Docker to connect remotely"
  echo "  shell     Open a shell with CoreOS VM started and environment set"
  echo ""
}

function start_vm() {
    # Start virtual machine if it isn't running
    if ! vagrant status | grep -q running
    then
      if [[ $1 == "halt" ]]
      then
        echo "CoreOS is not running. Exiting"
        exit 0
      fi
      echo "Start CoreOS Virtual machine"
      vagrant up --provision
    fi
}

############

check_deps

create_vagrant_dir

write_vagrantfile

write_user-data

setup_etc_host

case "$1" in
  up|start)
    start_vm
    echo
    echo "The CoreOS virtual machine is now running."
    echo "When you are finished and want to shut it down, just run:"
    echo
    echo "  coreosx halt"
    echo
    echo "To use docker, point the DOCKER_HOST environment variable"
    echo "to the docker daemon running on the virtual machine:"
    echo
    echo "  eval \`coreosx env\`"
    echo
    echo "Put this in your .profile to make it permanent."
    echo
    echo "Then, just use the docker command from OS X directly."
    echo
    exit 0
    ;;
  destroy)
    shift
    exec vagrant destroy "$@"
    ;;
  ssh)
    start_vm
    shift
    exec vagrant ssh "$@"
    ;;
  stop|halt)
    shift
    exec vagrant halt "$@"
    ;;
  help)
    help
    exit 0
    ;;
  "")
    help
    exit 0
    ;;
  shell)
    echo "Starting local CoreOS environment..."
    start_vm
    $SHELL
    echo "Stopping local CoreOS environment..."
    exec vagrant halt
    ;;
  env)
    echo "export DOCKER_HOST=$DOCKER_HOST"
    exit 0
    ;;
  vagrant)
    shift
    exec vagrant $*
    ;;
  status)
    exec vagrant status
    ;;
  suspend|pause)
    exec vagrant suspend
    ;;
  *)
    echo "Unrecognized command: $1"
    echo
    help
    exit 1
    ;;
esac
